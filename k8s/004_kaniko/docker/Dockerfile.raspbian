ARG OS_IMAGE_VERSION=latest
ARG OS_IMAGE_ARCH=arm32v7
FROM raspbian/stretch:${OS_IMAGE_VERSION} AS builder
# FROM raspbian/stretch:latest AS builder
# FROM balenalib/rpi-raspbian:${OS_IMAGE_VERSION} AS builder

# -----------------------------------------------------------------------------
# Arguments and ENV variables
# -----------------------------------------------------------------------------
ARG NODE_MAJOR
ENV ENV_NODE_MAJOR=${NODE_MAJOR}

ENV DEBIAN_FRONTEND=noninteractive
ENV AAI_HOME_DIR=/home/aai

# -----------------------------------------------------------------------------
# Check linux versions
# -----------------------------------------------------------------------------
    RUN echo "\n\nContent of /etc/os-release\n-----------------------" && \
    cat /etc/os-release && \
    echo "\n\nuname -a\n-----------------------" && \
    uname -a

# -----------------------------------------------------------------------------
# Install needed tools
# -----------------------------------------------------------------------------
# RUN echo "\n\nUpdating and installing deps ...\n-----------------------" && \
#     echo 'deb http://archive.debian.org/debian/ stretch main contrib non-free' > /etc/apt/sources.list && \
#     echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid-until && \
#     apt-get update && \
#     apt-get install -y --allow-unauthenticated \
#     apt-utils \
#     ca-certificates \
#     gnupg \
#     curl
RUN echo "\n\nUpdating and installing deps ...\n-----------------------" && \
    echo 'deb http://archive.debian.org/debian/ stretch main contrib non-free' > /etc/apt/sources.list && \
    echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid-until && \
    apt-get update && \
    apt-get install -y --allow-unauthenticated \
    apt-utils \
    ca-certificates \
    gnupg \
    curl \
    xz-utils

# -----------------------------------------------------------------------------
# Create working directory
# -----------------------------------------------------------------------------
RUN mkdir -p ${AAI_HOME_DIR}
WORKDIR ${AAI_HOME_DIR}

# -----------------------------------------------------------------------------
# Install node
# -----------------------------------------------------------------------------
# RUN echo "\n\nInstalling Node.js ...\n-----------------------" && \
#     mkdir -p /etc/apt/keyrings && \
#     curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
#     echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$ENV_NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
#     apt-get update && \
#     apt-get install -y nodejs && \
#     echo "nodejs version: $(nodejs -v)" && \
#     echo "npm version   : $(npm -v)"
# -----------------------------------------------------------------------------
# Add Node.js 20.x from NodeSource
# -----------------------------------------------------------------------------
# RUN echo "\n\nInstalling Node.js 20 ...\n-----------------------" && \
#     curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
#     apt-get update && \
#     apt-get install -y --allow-unauthenticated nodejs && \
#     echo "nodejs version: $(node -v)" && \
#     echo "npm version   : $(npm -v)"
RUN echo "\n\nInstalling Node.js 20 ...\n-----------------------" && \
    curl -fsSL https://nodejs.org/dist/v20.0.0/node-v20.0.0-linux-armv7l.tar.xz -o node.tar.xz && \
    mkdir -p /usr/local/lib/nodejs && \
    tar -xJf node.tar.xz -C /usr/local/lib/nodejs && \
    rm node.tar.xz && \
    ln -s /usr/local/lib/nodejs/node-v20.0.0-linux-armv7l/bin/node /usr/bin/node && \
    ln -s /usr/local/lib/nodejs/node-v20.0.0-linux-armv7l/bin/npm /usr/bin/npm && \
    ln -s /usr/local/lib/nodejs/node-v20.0.0-linux-armv7l/bin/npx /usr/bin/npx && \
    echo "Node.js version: $(node -v)" && \
    echo "npm version: $(npm -v)"


# -----------------------------------------------------------------------------
# Build binaries and copy to bin directory
# -----------------------------------------------------------------------------
COPY ../../ .
# TODO: the creation of aai-agent still has a problem on RPi
RUN echo "\n\nBuilding aai-agent binary ...\n-----------------------" && \
    npm install --force && \
    npm uninstall esbuild postject && \
    npm install esbuild postject --save-dev && \
    npm run build:bin


# =============================================================================
# 2nd stage to create a smaller size docker image
# =============================================================================
FROM ${OS_IMAGE_ARCH}/alpine:latest

RUN mkdir -p /workspace/bin
WORKDIR /workspace

COPY --from=builder /home/aai/dist/aai-agent /workspace/bin/aai-agent

CMD [ "/bin/sh" ]
